import cv2import sys# Read XMLxml_file = "../../../../../study/Python document/IPCV/coursework/CW-I-Shape-Detection-Dartboard-main/subtask1/cascade.xml"cascade = cv2.CascadeClassifier()# Calculate True Positive Rate (Recall)def calculate_recall(manual_count, detected_count):    if manual_count == 0:        # print("No manual counts, recall is 0.")        return 0    recall = min(detected_count / manual_count, 1)    # print(f"Calculated Recall: {recall}")    return recall# Calculate precisiondef calculate_precision(automatic, detected_count):    if automatic == 0:        # print("No automatic counts, precision is 0.")        return 0    precision = min(detected_count / automatic, 1)    # print(f"Calculated Precision: {precision}")    return precision# Calculate F1-Score.def calculate_f1_score(automatic, manual_count, detected_count):    recall = calculate_recall(manual_count, detected_count)    precision = calculate_precision(automatic, detected_count)    if recall + precision == 0:        # print("Recall and Precision are zero, F1-Score is 0.")        return 0    f1_score = 2 * recall * precision / (recall + precision)    # print(f"Calculated F1-Score: {f1_score}")    return f1_score# Calculate True Positive Rate (tpr) and F1-Score.def calculate_tpr_and_f1score(automatic, manual_count, detected_count):    recall = calculate_recall(manual_count, detected_count)    f1_score = calculate_f1_score(automatic, manual_count, detected_count)    print(f"Calculated TPR: {recall}, F1-Score: {f1_score}")    return recall, f1_score# calculate intersection areadef calculate_intersection_area(dart1, dart2):    X_left = max(dart1[0], dart2[0])  # left_x    Y_top = max(dart1[1], dart2[1])  # top_y    X_right = min(dart1[2], dart2[2])  # right_x    Y_bottom = min(dart1[3], dart2[3])  # bottom_y    intersection_area = max(0, X_right - X_left) * max(0, Y_bottom - Y_top)    print(f"Intersection Area: {intersection_area}")    return intersection_areadef calculate_area(dart):    area = (dart[3] - dart[1]) * (dart[2] - dart[0])    print(f"Dart Area: {area}")    return area# calculate ioudef calculate_iou(dart1, dart2):    intersection_area = calculate_intersection_area(dart1, dart2)    area1 = calculate_area(dart1)    area2 = calculate_area(dart2)    union_area = area1 + area2 - intersection_area    iou = intersection_area / float(union_area) if union_area != 0 else 0    print(f"IoU: {iou}")    return ioudef count_dart_matches(manual, automated, thresh):    dart_matches = 0    for manual_dart in manual:        for auto_dart in automated:            iou = calculate_iou(manual_dart, auto_dart)            if iou > thresh:                dart_matches += 1                print(f"Dart match found with IoU: {iou}")    return dart_matches# Detect and display dartboards in a frame.def detect_and_display(img_name):    gray = cv2.cvtColor(img_name, cv2.COLOR_BGR2GRAY)    cv2.equalizeHist(gray, gray)    darts = cascade.detectMultiScale(gray, scaleFactor=1.15, minNeighbors=2,flags=0 or cv2.CASCADE_SCALE_IMAGE,  minSize=(50, 50),  maxSize=(500, 500))    print("Number of dartboards:", len(darts))    for (x, y, width, height) in darts:        img_name = cv2.rectangle(img_name, (x, y), (x + width, y + height), (0, 255, 0), 2)  # detection frame    return darts# Define the actual coordinates of the dartboardDartboard = {    'dart0.jpg': [(420, 20, 180, 180)],    'dart1.jpg': [(195, 135, 190, 190)],    'dart2.jpg': [(95, 90, 100, 100)],    'dart3.jpg': [(325, 150, 70, 70)],    'dart4.jpg': [(200, 100, 200, 200)],    'dart5.jpg': [(440, 140, 95, 95)],    'dart6.jpg': [(210, 120, 60, 60)],    'dart7.jpg': [(255, 170, 145, 145)],    'dart8.jpg': [(845, 215, 120, 120), (60, 255, 60, 90)],    'dart9.jpg': [(201, 50, 230, 230)],    'dart10.jpg': [(90, 105, 95, 105), (585, 130, 55, 80), (920, 150, 35, 65)],    'dart11.jpg': [(175, 102, 50, 70)],    'dart12.jpg': [(155, 80, 60, 135)],    'dart13.jpg': [(270, 125, 130, 130)],    'dart14.jpg': [(108, 95, 140, 140), (980, 90, 140, 140)],    'dart15.jpg': [(155, 55, 130, 135)]}# Processing images and detecting dartsdef process_coordinates(darts, manual_annotations):    coordinates_list = []    for (x, y, w, h) in darts:        coordinates = [x, y, x + w, y + h]        coordinates_list.append(coordinates)    return coordinates_listdef process_and_detect_darts(filename):    filename_path = '../Dartboard/' + filename    frame = cv2.imread(filename_path, cv2.IMREAD_COLOR)    if not cascade.load(xml_file):        exit(0)    darts = detect_and_display(frame)    manual_coordinates_list = process_coordinates(Dartboard[filename], True)    auto_coordinates_list = process_coordinates(darts, False)    for manual_coordinates in manual_coordinates_list:        x, y, x2, y2 = manual_coordinates        frame = cv2.rectangle(frame, (x, y), (x2, y2), (0, 0, 255), 2)    success_detected_darts = count_dart_matches(manual_coordinates_list, auto_coordinates_list, 0.5)    img_save_location = 'image-out/' + 'out_' + filename    cv2.imwrite(img_save_location, frame)    return darts, success_detected_darts, manual_coordinates_list, auto_coordinates_list, frame# Calculate and display statisticsdef calculate_and_display_statistics(filename, darts, success_detected_darts):    tpr, f1_score = calculate_tpr_and_f1score(len(darts), len(Dartboard[filename]), success_detected_darts)    print("Success detected darts ：", success_detected_darts)    print("TPR (Recall) ：", tpr)    print("F1 Score ：", f1_score)def main():    filename = sys.argv[1]    darts, success, manual_coordinates_list, auto_coordinates_list, frame = process_and_detect_darts(filename)    calculate_and_display_statistics(filename, darts, success)    cv2.imshow("Out Image", frame)    cv2.waitKey(0)if __name__ == "__main__":    main()